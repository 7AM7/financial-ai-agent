version: '3.9'

services:
  postgres:
    image: postgres:16-alpine
    container_name: financial-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: financial_data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - financial-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: financial-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: financial_data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      HOST: 0.0.0.0
      PORT: 8000
      MODEL: ${MODEL:-gpt-4o-mini}
      MODEL_PROVIDER: ${MODEL_PROVIDER:-azure_openai}
      API_KEY: ${API_KEY}
      OPENAI_API_VERSION: ${OPENAI_API_VERSION:-2025-03-01-preview}
      AZURE_ENDPOINT: ${AZURE_ENDPOINT}
      AZURE_DEPLOYMENT: ${AZURE_DEPLOYMENT:-gpt-4o-mini}
      LANGSMITH_TRACING: ${LANGSMITH_TRACING:-true}
      LANGSMITH_ENDPOINT: ${LANGSMITH_ENDPOINT:-http://localhost:4318}
      LANGSMITH_API_KEY: ${LANGSMITH_API_KEY}
      LANGSMITH_PROJECT: ${LANGSMITH_PROJECT}
    ports:
      - "8000:8000"
    networks:
      - financial-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 300s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: financial-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL:-http://localhost:8000}
      REMOTE_ACTION_URL: ${REMOTE_ACTION_URL:-http://localhost:8000/copilotkit}
    ports:
      - "3000:3000"
    networks:
      - financial-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

networks:
  financial-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
